from select import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import func, extract
from datetime import datetime, timedelta

from app.models.models import User, Order, Reservation, Item, StaffAttendance


class AnalyticsService:
    def __init__(self, session: AsyncSession):
        self.session = session


class UserAnalyticsService(AnalyticsService):
    async def get_user_count(self):
        """Returns the total number of users."""
        result = await self.session.execute(select(func.count(User.id)))
        return result.scalar_one()

    async def get_new_users_by_date(self, start_date: datetime, end_date: datetime):
        """Returns a list of (date, user_count) for new users within the date range."""
        result = await self.session.execute(
            select(func.date(User.created_at), func.count(User.id))
            .where(User.created_at >= start_date)
            .where(User.created_at <= end_date)
            .group_by(func.date(User.created_at))
            .order_by(func.date(User.created_at))
        )
        return result.all()

    async def get_user_activity_levels(self):
        """Returns user activity levels (example: last login)."""
        # This is a placeholder; implement actual activity tracking in your models.
        return "Implement user activity tracking to get meaningful data."


class OrderAnalyticsService(AnalyticsService):
    async def get_total_orders(self):
        """Returns the total number of orders."""
        result = await self.session.execute(select(func.count(Order.id)))
        return result.scalar_one()

    async def get_average_order_value(self):
        """Returns the average order value."""
        result = await self.session.execute(select(func.avg(Order.total_amount)))
        return result.scalar_one()

    async def get_order_frequency_by_date(
        self, start_date: datetime, end_date: datetime
    ):
        """Returns a list of (date, order_count) for orders within the date range."""
        result = await self.session.execute(
            select(func.date(Order.order_date), func.count(Order.id))
            .where(Order.order_date >= start_date)
            .where(Order.order_date <= end_date)
            .group_by(func.date(Order.order_date))
            .order_by(func.date(Order.order_date))
        )
        return result.all()


class ReservationAnalyticsService(AnalyticsService):
    async def get_total_reservations(self):
        """Returns the total number of reservations."""
        result = await self.session.execute(select(func.count(Reservation.id)))
        return result.scalar_one()

    async def get_reservation_frequency_by_date(
        self, start_date: datetime, end_date: datetime
    ):
        """Returns a list of (date, reservation_count) for reservations within the date range."""
        result = await self.session.execute(
            select(func.date(Reservation.reservation_date), func.count(Reservation.id))
            .where(Reservation.reservation_date >= start_date)
            .where(Reservation.reservation_date <= end_date)
            .group_by(func.date(Reservation.reservation_date))
            .order_by(func.date(Reservation.reservation_date))
        )
        return result.all()

    async def get_popular_reservation_times(self):
        """Returns popular reservation times (example: hour of day)."""
        result = await self.session.execute(
            select(
                extract("hour", Reservation.reservation_time),
                func.count(Reservation.id),
            )
            .group_by(extract("hour", Reservation.reservation_time))
            .order_by(func.count(Reservation.id).desc())
        )
        return result.all()


class ItemAnalyticsService(AnalyticsService):
    async def get_popular_items(self):
        """Returns a list of popular items based on order frequency."""
        result = await self.session.execute(
            select(Item.name, func.count(Order.id))
            .join(Order, Order.items)  # Assuming a many-to-many relationship
            .group_by(Item.name)
            .order_by(func.count(Order.id).desc())
            .limit(10)  # Limit to top 10 items
        )
        return result.all()

    async def get_revenue_per_item(self, start_date: datetime, end_date: datetime):
        """Returns revenue generated by each item within a date range."""
        # This requires a more complex query depending on your data model.
        # Example assumes Order has item_id and quantity, and items have price.
        result = await self.session.execute(
            select(Item.name, func.sum(Order.total_amount))
            .join(Order, Order.items)
            .where(Order.order_date >= start_date)
            .where(Order.order_date <= end_date)
            .group_by(Item.name)
            .order_by(func.sum(Order.total_amount).desc())
        )
        return result.all()


class StaffAttendanceAnalyticsService(AnalyticsService):
    async def get_attendance_rate(self, start_date: datetime, end_date: datetime):
        """Returns the staff attendance rate within a date range."""
        total_staff = await self.session.execute(
            select(func.count(StaffAttendance.staff_id.distinct()))
        )
        total_staff_count = total_staff.scalar_one()

        present_staff = await self.session.execute(
            select(func.count(StaffAttendance.staff_id.distinct()))
            .where(StaffAttendance.attendance_date >= start_date)
            .where(StaffAttendance.attendance_date <= end_date)
            .where(StaffAttendance.is_present == True)
        )
        present_staff_count = present_staff.scalar_one()

        if total_staff_count == 0:
            return 0  # Avoid division by zero

        return (present_staff_count / total_staff_count) * 100

    async def get_absence_patterns(self):
        """Returns absence patterns (example: days with most absences)."""
        result = await self.session.execute(
            select(
                func.date(StaffAttendance.attendance_date),
                func.count(StaffAttendance.staff_id),
            )
            .where(StaffAttendance.is_present == False)
            .group_by(func.date(StaffAttendance.attendance_date))
            .order_by(func.count(StaffAttendance.staff_id).desc())
            .limit(5)  # Top 5 days with most absences
        )
        return result.all()
